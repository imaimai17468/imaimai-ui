{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-transition-toggle",
  "type": "registry:ui",
  "title": "Icon Transition Toggle",
  "description": "A toggle button with smooth icon transitions using opacity, blur, and scale animations inspired by animations.dev",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/components/registry/icon-transition-toggle.tsx",
      "content": "\"use client\";\n\nimport type { VariantProps } from \"class-variance-authority\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport type { LucideIcon } from \"lucide-react\";\nimport type * as React from \"react\";\nimport { useState } from \"react\";\nimport { Button, type buttonVariants } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface IconTransitionToggleProps\n\textends Omit<\n\t\tReact.ComponentProps<\"button\"> &\n\t\t\tVariantProps<typeof buttonVariants> & {\n\t\t\t\tasChild?: boolean;\n\t\t\t},\n\t\t\"children\" | \"onClick\"\n\t> {\n\t/** 最初に表示するアイコン */\n\ticon: LucideIcon;\n\t/** トグル時に表示するアイコン */\n\ttoggledIcon: LucideIcon;\n\t/** 現在の状態（true: toggledIcon表示、false: icon表示） */\n\tisToggled: boolean;\n\t/** トグル時のコールバック */\n\tonToggle: () => void;\n\t/** アイコンのサイズ（デフォルト: 24px） */\n\ticonSize?: number;\n\t/** アイコンコンポーネントに渡す追加のプロパティ */\n\ticonProps?: React.ComponentProps<LucideIcon>;\n\t/** トグル後のアイコンコンポーネントに渡す追加のプロパティ */\n\ttoggledIconProps?: React.ComponentProps<LucideIcon>;\n\t/** ホバー時に表示するtooltipテキスト */\n\ttooltip?: string;\n\t/** トグル後にホバー時に表示するtooltipテキスト */\n\ttoggledTooltip?: string;\n}\n\n/**\n * アイコントランジション付きトグルボタン\n * animations.devの「良いアニメーション」を参考にした実装\n *\n * アニメーション仕様:\n * - ボタン本体: 0.15s cubic-bezier(0.4, 0, 0.2, 1)で背景色遷移\n * - アイコン切り替え: opacity + blur + scale の組み合わせ\n * - exit: opacity 0, blur 4px, scale 0.8\n * - enter: opacity 1, blur 0, scale 1\n *\n * @example\n * ```tsx\n * const [isLiked, setIsLiked] = useState(false);\n *\n * <IconTransitionToggle\n *   icon={Heart}\n *   toggledIcon={Heart}\n *   isToggled={isLiked}\n *   onToggle={() => setIsLiked(!isLiked)}\n *   aria-label=\"いいね\"\n * />\n * ```\n */\nexport function IconTransitionToggle({\n\ticon: Icon,\n\ttoggledIcon: ToggledIcon,\n\tisToggled,\n\tonToggle,\n\ticonSize,\n\ticonProps,\n\ttoggledIconProps,\n\ttooltip,\n\ttoggledTooltip,\n\tvariant = \"outline\",\n\tsize = \"icon\",\n\tclassName,\n\t...buttonProps\n}: IconTransitionToggleProps) {\n\t// size に応じて自動的に iconSize を設定\n\tconst computedIconSize =\n\t\ticonSize ??\n\t\t(size === \"sm\" ? 12 : size === \"lg\" ? 20 : size === \"default\" ? 16 : 16);\n\n\t// size に応じてボタンを正方形にする\n\tconst sizeClassName =\n\t\tsize === \"sm\" ? \"size-8\" : size === \"lg\" ? \"size-10\" : \"\";\n\n\t// 現在の状態に応じたtooltipテキストを取得\n\tconst currentTooltip = isToggled ? toggledTooltip : tooltip;\n\n\t// Tooltipの表示制御（クリック時に再表示して内容を更新）\n\tconst [isTooltipOpen, setIsTooltipOpen] = useState(false);\n\n\t// クリック時の処理\n\tconst handleToggle = () => {\n\t\t// Tooltipを一瞬閉じて再度開くことで内容を更新\n\t\tsetIsTooltipOpen(false);\n\t\tonToggle();\n\t\t// 次のフレームでTooltipを再表示\n\t\tsetTimeout(() => setIsTooltipOpen(true), 0);\n\t};\n\n\t// Button要素を定義\n\tconst button = (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\tvariant={variant}\n\t\t\tsize=\"icon\"\n\t\t\tonClick={currentTooltip ? handleToggle : onToggle}\n\t\t\tonMouseEnter={() => currentTooltip && setIsTooltipOpen(true)}\n\t\t\tonMouseLeave={() => currentTooltip && setIsTooltipOpen(false)}\n\t\t\tclassName={cn(\n\t\t\t\t\"transition-transform active:scale-[0.97]\",\n\t\t\t\tsizeClassName,\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...buttonProps}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"relative\"\n\t\t\t\tstyle={{ width: computedIconSize, height: computedIconSize }}\n\t\t\t>\n\t\t\t\t<AnimatePresence initial={false}>\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tkey={isToggled ? \"toggled\" : \"default\"}\n\t\t\t\t\t\tclassName=\"absolute inset-0 flex items-center justify-center\"\n\t\t\t\t\t\t// will-change-transformを設定\n\t\t\t\t\t\tstyle={{ willChange: \"transform\" }}\n\t\t\t\t\t\tinitial={{\n\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t\tfilter: \"blur(2px)\",\n\t\t\t\t\t\t\tscale: 0.97,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tanimate={{\n\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\tfilter: \"blur(0px)\",\n\t\t\t\t\t\t\tscale: 1,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\texit={{\n\t\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\t\tfilter: \"blur(2px)\",\n\t\t\t\t\t\t\tscale: 0.97,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\tduration: 0.15,\n\t\t\t\t\t\t\tease: [0.4, 0, 0.2, 1], // cubic-bezier(0.4, 0, 0.2, 1)\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{isToggled ? (\n\t\t\t\t\t\t\t<ToggledIcon\n\t\t\t\t\t\t\t\tsize={computedIconSize}\n\t\t\t\t\t\t\t\t{...toggledIconProps}\n\t\t\t\t\t\t\t\tclassName={cn(\"size-auto\", toggledIconProps?.className)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\t\tsize={computedIconSize}\n\t\t\t\t\t\t\t\t{...iconProps}\n\t\t\t\t\t\t\t\tclassName={cn(\"size-auto\", iconProps?.className)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</motion.div>\n\t\t\t\t</AnimatePresence>\n\t\t\t</div>\n\t\t</Button>\n\t);\n\n\t// tooltipが指定されていない場合は通常のButtonを返す\n\tif (!currentTooltip) {\n\t\treturn button;\n\t}\n\n\t// tooltipがある場合はTooltipでラップ（controlled mode）\n\treturn (\n\t\t<Tooltip open={isTooltipOpen} onOpenChange={setIsTooltipOpen}>\n\t\t\t<TooltipTrigger asChild>{button}</TooltipTrigger>\n\t\t\t<TooltipContent>\n\t\t\t\t<p>{currentTooltip}</p>\n\t\t\t</TooltipContent>\n\t\t</Tooltip>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}