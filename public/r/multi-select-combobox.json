{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-select-combobox",
  "type": "registry:ui",
  "title": "Multi Select Combobox",
  "description": "A searchable multi-select combobox component with badge display",
  "registryDependencies": [
    "button",
    "command",
    "popover",
    "badge"
  ],
  "files": [
    {
      "path": "src/components/registry/multi-select-combobox.tsx",
      "content": "\"use client\";\n\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tCommand,\n\tCommandEmpty,\n\tCommandGroup,\n\tCommandInput,\n\tCommandItem,\n\tCommandList,\n} from \"@/components/ui/command\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface MultiSelectOption {\n\tvalue: string;\n\tlabel: string;\n}\n\nexport interface MultiSelectComboboxProps {\n\toptions: MultiSelectOption[];\n\tselected: string[];\n\tonChange: (selected: string[]) => void;\n\tplaceholder?: string;\n\tsearchPlaceholder?: string;\n\tclassName?: string;\n}\n\nexport function MultiSelectCombobox({\n\toptions,\n\tselected,\n\tonChange,\n\tplaceholder = \"Select items...\",\n\tsearchPlaceholder = \"Search...\",\n\tclassName,\n}: MultiSelectComboboxProps) {\n\tconst [open, setOpen] = useState(false);\n\n\tconst handleSelect = (value: string) => {\n\t\tconst isSelected = selected.includes(value);\n\t\tif (isSelected) {\n\t\t\tonChange(selected.filter((item) => item !== value));\n\t\t} else {\n\t\t\tonChange([...selected, value]);\n\t\t}\n\t};\n\n\tconst handleRemove = (value: string) => {\n\t\tonChange(selected.filter((item) => item !== value));\n\t};\n\n\treturn (\n\t\t<div className={cn(\"w-full\", className)}>\n\t\t\t<Popover open={open} onOpenChange={setOpen}>\n\t\t\t\t<PopoverTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\taria-expanded={open}\n\t\t\t\t\t\tclassName=\"w-full justify-start gap-2\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{selected.length > 0 ? (\n\t\t\t\t\t\t\t<div className=\"flex flex-1 flex-wrap gap-1\">\n\t\t\t\t\t\t\t\t{selected.map((value) => {\n\t\t\t\t\t\t\t\t\tconst label = options.find(\n\t\t\t\t\t\t\t\t\t\t(option) => option.value === value,\n\t\t\t\t\t\t\t\t\t)?.label;\n\t\t\t\t\t\t\t\t\tif (!label) return null;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\t\t\tkey={value}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"font-normal\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<span className=\"flex-1 text-left text-muted-foreground\">\n\t\t\t\t\t\t\t\t{placeholder}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<ChevronsUpDown className=\"h-4 w-4 shrink-0 opacity-50\" />\n\t\t\t\t\t</Button>\n\t\t\t\t</PopoverTrigger>\n\t\t\t\t<PopoverContent\n\t\t\t\t\tclassName=\"w-[var(--radix-popover-trigger-width)] p-0\"\n\t\t\t\t\talign=\"start\"\n\t\t\t\t>\n\t\t\t\t\t<Command>\n\t\t\t\t\t\t<CommandInput placeholder={searchPlaceholder} />\n\t\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t\t<CommandEmpty>No items found.</CommandEmpty>\n\t\t\t\t\t\t\t<CommandGroup>\n\t\t\t\t\t\t\t\t{options.map((option) => {\n\t\t\t\t\t\t\t\t\tconst isSelected = selected.includes(option.value);\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\t\t\t\tvalue={option.value}\n\t\t\t\t\t\t\t\t\t\t\tonSelect={() => handleSelect(option.value)}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<Check\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"mr-2 h-4 w-4\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tisSelected ? \"opacity-100\" : \"opacity-0\",\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</CommandGroup>\n\t\t\t\t\t\t</CommandList>\n\t\t\t\t\t\t{/* Selected items as badges with remove button */}\n\t\t\t\t\t\t{selected.length > 0 && (\n\t\t\t\t\t\t\t<div className=\"border-t p-2\">\n\t\t\t\t\t\t\t\t<div className=\"flex flex-wrap gap-1\">\n\t\t\t\t\t\t\t\t\t{selected.map((value) => {\n\t\t\t\t\t\t\t\t\t\tconst label = options.find(\n\t\t\t\t\t\t\t\t\t\t\t(option) => option.value === value,\n\t\t\t\t\t\t\t\t\t\t)?.label;\n\t\t\t\t\t\t\t\t\t\tif (!label) return null;\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\t\t\t\tkey={value}\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"gap-1 pr-1\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<span>{label}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleRemove(value);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"ml-1 rounded-sm opacity-70 hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-label={`Remove ${label}`}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<X className=\"h-3 w-3\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Command>\n\t\t\t\t</PopoverContent>\n\t\t\t</Popover>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}