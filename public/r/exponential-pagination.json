{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "exponential-pagination",
  "type": "registry:ui",
  "title": "Exponential Pagination",
  "description": "A pagination component with exponential jumps (powers of 2) for handling large page counts like 500+",
  "registryDependencies": [
    "pagination"
  ],
  "files": [
    {
      "path": "src/components/registry/exponential-pagination.tsx",
      "content": "\"use client\";\n\nimport {\n\tPagination,\n\tPaginationContent,\n\tPaginationItem,\n\tPaginationLink,\n\tPaginationNext,\n\tPaginationPrevious,\n} from \"@/components/ui/pagination\";\n\nexport interface ExponentialPaginationProps {\n\t/** 現在のページ（1-indexed） */\n\tcurrentPage: number;\n\t/** 総ページ数 */\n\ttotalPages: number;\n\t/** ページ変更時のコールバック */\n\tonPageChange: (page: number) => void;\n\t/** 現在ページの前後に表示する連続ページ数（デフォルト: 3） */\n\tsiblingCount?: number;\n}\n\n/**\n * 指数的なページ番号の配列を生成する（省略記号なし）\n * 現在ページから累積的に2の累乗でジャンプ\n */\nfunction generateExponentialPages(\n\tcurrentPage: number,\n\ttotalPages: number,\n\tsiblingCount: number,\n): number[] {\n\tconst pages = new Set<number>();\n\n\t// 1と最終ページは常に表示\n\tpages.add(1);\n\tpages.add(totalPages);\n\n\t// 現在ページの前後siblingCount分を連続表示\n\tconst rangeStart = Math.max(1, currentPage - siblingCount);\n\tconst rangeEnd = Math.min(totalPages, currentPage + siblingCount);\n\tfor (let i = rangeStart; i <= rangeEnd; i++) {\n\t\tpages.add(i);\n\t}\n\n\t// 前方向: rangeStartから累積的に2の累乗を引いていく\n\tlet prevPage = rangeStart;\n\tlet prevPower = 2; // 2^2 = 4 から開始\n\twhile (prevPage > 1) {\n\t\tprevPage = prevPage - 2 ** prevPower;\n\t\tif (prevPage >= 1) {\n\t\t\tpages.add(prevPage);\n\t\t}\n\t\tprevPower++;\n\t}\n\n\t// 後方向: rangeEndから累積的に2の累乗を足していく\n\tlet nextPage = rangeEnd;\n\tlet nextPower = 2; // 2^2 = 4 から開始\n\twhile (nextPage < totalPages) {\n\t\tnextPage = nextPage + 2 ** nextPower;\n\t\tif (nextPage <= totalPages) {\n\t\t\tpages.add(nextPage);\n\t\t}\n\t\tnextPower++;\n\t}\n\n\t// ソートして配列に変換（省略記号なし）\n\treturn Array.from(pages).sort((a, b) => a - b);\n}\n\n/**\n * 指数的なページジャンプを持つPaginationコンポーネント（省略記号なし）\n * AtCoderのstandingsページのようなページ数が多い場合に適している\n * 現在ページから累積的に2の累乗でジャンプ\n *\n * @example\n * ```tsx\n * <ExponentialPagination\n *   currentPage={256}\n *   totalPages={500}\n *   onPageChange={(page) => console.log(page)}\n *   siblingCount={3}\n * />\n * ```\n */\nexport function ExponentialPagination({\n\tcurrentPage,\n\ttotalPages,\n\tonPageChange,\n\tsiblingCount = 3,\n}: ExponentialPaginationProps) {\n\tconst pages = generateExponentialPages(currentPage, totalPages, siblingCount);\n\n\tconst handlePrevious = () => {\n\t\tif (currentPage > 1) {\n\t\t\tonPageChange(currentPage - 1);\n\t\t}\n\t};\n\n\tconst handleNext = () => {\n\t\tif (currentPage < totalPages) {\n\t\t\tonPageChange(currentPage + 1);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Pagination>\n\t\t\t{/* モバイルレイアウト */}\n\t\t\t<div className=\"flex w-full flex-col gap-2 sm:hidden\">\n\t\t\t\t{/* Prev/Nextボタン */}\n\t\t\t\t<div className=\"grid grid-cols-2 gap-2\">\n\t\t\t\t\t<PaginationPrevious\n\t\t\t\t\t\tonClick={handlePrevious}\n\t\t\t\t\t\taria-disabled={currentPage === 1}\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tcurrentPage === 1 ? \"pointer-events-none opacity-50\" : \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<PaginationNext\n\t\t\t\t\t\tonClick={handleNext}\n\t\t\t\t\t\taria-disabled={currentPage === totalPages}\n\t\t\t\t\t\tclassName={`justify-self-end ${\n\t\t\t\t\t\t\tcurrentPage === totalPages ? \"pointer-events-none opacity-50\" : \"\"\n\t\t\t\t\t\t}`}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{/* ページ番号（grid表示） */}\n\t\t\t\t<div className=\"grid grid-cols-[repeat(auto-fit,minmax(60px,1fr))] gap-1\">\n\t\t\t\t\t{pages.map((page) => (\n\t\t\t\t\t\t<PaginationLink\n\t\t\t\t\t\t\tkey={`page-${page}`}\n\t\t\t\t\t\t\tonClick={() => onPageChange(page)}\n\t\t\t\t\t\t\tisActive={page === currentPage}\n\t\t\t\t\t\t\tclassName=\"justify-center justify-self-center\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{page}\n\t\t\t\t\t\t</PaginationLink>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{/* デスクトップレイアウト */}\n\t\t\t<PaginationContent className=\"hidden sm:flex\">\n\t\t\t\t<PaginationItem>\n\t\t\t\t\t<PaginationPrevious\n\t\t\t\t\t\tonClick={handlePrevious}\n\t\t\t\t\t\taria-disabled={currentPage === 1}\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tcurrentPage === 1 ? \"pointer-events-none opacity-50\" : \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</PaginationItem>\n\n\t\t\t\t{pages.map((page) => (\n\t\t\t\t\t<PaginationItem key={`page-${page}`}>\n\t\t\t\t\t\t<PaginationLink\n\t\t\t\t\t\t\tonClick={() => onPageChange(page)}\n\t\t\t\t\t\t\tisActive={page === currentPage}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{page}\n\t\t\t\t\t\t</PaginationLink>\n\t\t\t\t\t</PaginationItem>\n\t\t\t\t))}\n\n\t\t\t\t<PaginationItem>\n\t\t\t\t\t<PaginationNext\n\t\t\t\t\t\tonClick={handleNext}\n\t\t\t\t\t\taria-disabled={currentPage === totalPages}\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tcurrentPage === totalPages ? \"pointer-events-none opacity-50\" : \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</PaginationItem>\n\t\t\t</PaginationContent>\n\t\t</Pagination>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}